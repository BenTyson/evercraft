generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  type       String
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String   @default("US")
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isDefault])
  @@index([userId])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  shopId    String?
  eventType String
  eventData Json
  sessionId String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  shop      Shop?    @relation(fields: [shopId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([eventType])
  @@index([shopId])
  @@index([userId])
}

model Category {
  id              String     @id @default(cuid())
  parentId        String?
  name            String
  slug            String     @unique
  description     String?
  image           String?
  metaTitle       String?
  metaDescription String?
  position        Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  parent          Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToCategory")
  products        Product[]

  @@index([parentId])
  @@index([position])
  @@index([slug])
}

model Certification {
  id          String    @id @default(cuid())
  productId   String?
  shopId      String?
  name        String
  type        String
  issuedBy    String
  issuedDate  DateTime?
  expiryDate  DateTime?
  certificate String?
  verified    Boolean   @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([type])
  @@index([verified])
}

model Collection {
  id                String              @id @default(cuid())
  userId            String
  name              String
  description       String?
  isPublic          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionProducts CollectionProduct[]

  @@index([isPublic])
  @@index([userId])
}

model CollectionProduct {
  id           String     @id @default(cuid())
  collectionId String
  productId    String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([collectionId, productId])
  @@index([collectionId])
  @@index([productId])
}

model Donation {
  id          String         @id @default(cuid())
  orderId     String
  nonprofitId String
  shopId      String?
  amount      Float
  status      DonationStatus @default(PENDING)
  payoutId    String?
  createdAt   DateTime       @default(now())
  nonprofit   Nonprofit      @relation(fields: [nonprofitId], references: [id])

  @@index([createdAt])
  @@index([nonprofitId])
  @@index([orderId])
  @@index([status])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}

model Message {
  id                            String   @id @default(cuid())
  fromUserId                    String
  toUserId                      String
  orderId                       String?
  subject                       String?
  body                          String
  attachments                   String[]
  isRead                        Boolean  @default(false)
  createdAt                     DateTime @default(now())
  User_Message_fromUserIdToUser User     @relation("Message_fromUserIdToUser", fields: [fromUserId], references: [id])
  User_Message_toUserIdToUser   User     @relation("Message_toUserIdToUser", fields: [toUserId], references: [id])

  @@index([createdAt])
  @@index([fromUserId])
  @@index([isRead])
  @@index([toUserId])
}

model Nonprofit {
  id              String      @id @default(cuid())
  name            String
  ein             String      @unique
  mission         String
  description     String?
  category        String[]
  logo            String?
  images          String[]
  website         String?
  socialLinks     Json?
  isVerified      Boolean     @default(false)
  stripeAccountId String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  donations       Donation[]
  orderItems      OrderItem[]
  shops           Shop[]

  @@index([ein])
  @@index([isVerified])
}

model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailMarketing    Boolean  @default(false)
  emailOrderUpdates Boolean  @default(true)
  emailMessages     Boolean  @default(true)
  emailReviews      Boolean  @default(true)
  pushNotifications Boolean  @default(false)
  smsNotifications  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                   String        @id @default(cuid())
  orderNumber          String        @unique
  buyerId              String
  status               OrderStatus   @default(PROCESSING)
  subtotal             Float
  shippingCost         Float         @default(0)
  tax                  Float         @default(0)
  total                Float
  nonprofitDonation    Float         @default(0)
  shippingAddress      Json
  billingAddress       Json
  paymentStatus        PaymentStatus @default(PENDING)
  paymentIntentId      String?       @unique
  trackingNumber       String?
  trackingCarrier      String?
  shippingLabelUrl     String?
  shippoTransactionId  String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  buyer                User          @relation(fields: [buyerId], references: [id])
  items                OrderItem[]
  payments             Payment[]
  taxRecords           TaxRecord[]

  @@index([buyerId])
  @@index([createdAt])
  @@index([orderNumber])
  @@index([paymentStatus])
  @@index([status])
}

model OrderItem {
  id              String          @id @default(cuid())
  orderId         String
  productId       String
  variantId       String?
  shopId          String
  quantity        Int
  priceAtPurchase Float
  subtotal        Float
  nonprofitId     String?
  donationAmount  Float           @default(0)
  createdAt       DateTime        @default(now())
  nonprofit       Nonprofit?      @relation(fields: [nonprofitId], references: [id])
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id])
  shop            Shop            @relation(fields: [shopId], references: [id])
  variant         ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([nonprofitId])
  @@index([orderId])
  @@index([productId])
  @@index([shopId])
}

model Payment {
  id                    String              @id @default(cuid())
  orderId               String
  shopId                String
  stripePaymentIntentId String              @unique
  amount                Float
  platformFee           Float
  sellerPayout          Float
  nonprofitDonation     Float
  status                PaymentStatus       @default(PENDING)
  payoutId              String?
  createdAt             DateTime            @default(now())
  order                 Order               @relation(fields: [orderId], references: [id])
  shop                  Shop                @relation(fields: [shopId], references: [id])
  payout                SellerPayout?       @relation(fields: [payoutId], references: [id])
  payoutItems           PaymentPayoutItem[]

  @@index([createdAt])
  @@index([orderId])
  @@index([shopId])
  @@index([status])
  @@index([payoutId])
}

model Product {
  id                  String               @id @default(cuid())
  shopId              String
  title               String
  description         String
  price               Float
  compareAtPrice      Float?
  sku                 String?
  categoryId          String?
  tags                String[]
  status              ProductStatus        @default(DRAFT)
  inventoryQuantity   Int                  @default(0)
  trackInventory      Boolean              @default(true)
  lowStockThreshold   Int?
  ecoScore            Int?
  ecoAttributes       Json?
  metaTitle           String?
  metaDescription     String?
  // Variant support
  hasVariants         Boolean              @default(false)
  variantOptions      Json?                // { options: [{ name, position, values[], isCustom }] }
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  certifications      Certification[]
  collectionProducts  CollectionProduct[]
  favorites           Favorite[]
  orderItems          OrderItem[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  shop                Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  images              ProductImage[]
  variants            ProductVariant[]
  reviews             Review[]
  sustainabilityScore SustainabilityScore?
  ecoProfile          ProductEcoProfile?
  shopSections        ShopSectionProduct[]

  @@index([categoryId])
  @@index([createdAt])
  @@index([ecoScore])
  @@index([shopId])
  @@index([status])
  @@index([hasVariants])
}

model ProductImage {
  id             String           @id @default(cuid())
  productId      String
  url            String
  altText        String?
  position       Int              @default(0)
  isPrimary      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants       ProductVariant[]

  @@index([isPrimary])
  @@index([productId])
}

model ProductVariant {
  id                String        @id @default(cuid())
  productId         String
  name              String
  sku               String?
  price             Float?
  inventoryQuantity Int           @default(0)
  trackInventory    Boolean       @default(true)
  imageId           String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orderItems        OrderItem[]
  image             ProductImage? @relation(fields: [imageId], references: [id])
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sku])
}

model Promotion {
  id              String   @id @default(cuid())
  shopId          String?
  code            String   @unique
  description     String
  discountType    String
  discountValue   Float
  minimumPurchase Float?
  maxUses         Int?
  currentUses     Int      @default(0)
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  shop            Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([endDate])
  @@index([isActive])
  @@index([shopId])
}

model Review {
  id                 String   @id @default(cuid())
  productId          String
  userId             String
  orderId            String?
  rating             Int
  text               String?
  images             String[]
  isVerifiedPurchase Boolean  @default(false)
  helpfulCount       Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([isVerifiedPurchase])
  @@index([productId])
  @@index([rating])
  @@index([userId])
}

model SearchHistory {
  id        String   @id @default(cuid())
  userId    String?
  query     String
  filters   Json?
  results   Int
  clicked   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([query])
  @@index([userId])
}

model SellerApplication {
  id                    String            @id @default(cuid())
  userId                String
  businessName          String
  businessEmail         String?
  businessWebsite       String?
  businessDescription   String
  businessAge           String? // "<1 year" | "1-4 years" | "5+ years"
  storefronts           Json? // { etsy, faire, amazon, website, other }
  ecoQuestions          Json // Legacy: unstructured text answers (deprecated)
  shopEcoProfileData    Json? // New: structured ShopEcoProfile data
  ecoCommentary         Json? // Optional commentary for each eco practice
  preferredNonprofit    String?
  donationPercentage    Float             @default(1.0)
  status                ApplicationStatus @default(PENDING)
  reviewNotes           String?
  reviewedAt            DateTime?
  // Smart Gate fields
  completenessScore     Int               @default(0) // 0-100% based on ShopEcoProfile
  tier                  String            @default("starter") // starter | verified | certified
  autoApprovalEligible  Boolean           @default(false)
  rejectionReason       String? // Educational feedback for rejections
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([completenessScore])
  @@index([createdAt])
  @@index([status])
  @@index([tier])
  @@index([userId])
}

model SellerReview {
  id                    String   @id @default(cuid())
  shopId                String
  userId                String
  orderId               String?
  rating                Int
  shippingSpeedRating   Int?
  communicationRating   Int?
  itemAsDescribedRating Int?
  text                  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shop                  Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([rating])
  @@index([shopId])
  @@index([userId])
}

model ShippingProfile {
  id                 String   @id @default(cuid())
  shopId             String
  name               String
  processingTimeMin  Int
  processingTimeMax  Int
  shippingOrigin     Json
  shippingRates      Json
  carbonNeutralPrice Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  shop               Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model Shop {
  id                 String                  @id @default(cuid())
  userId             String                  @unique
  slug               String                  @unique
  name               String
  bio                String?
  story              String?
  bannerImage        String?
  logo               String?
  colors             Json?
  isVerified         Boolean                 @default(false)
  verificationStatus VerificationStatus      @default(PENDING)
  stripeAccountId    String?                 @unique
  nonprofitId        String?
  donationPercentage Float                   @default(1.0)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  analyticsEvents    AnalyticsEvent[]
  orderItems         OrderItem[]
  products           Product[]
  promotions         Promotion[]
  sellerReviews      SellerReview[]
  shippingProfiles   ShippingProfile[]
  nonprofit          Nonprofit?              @relation(fields: [nonprofitId], references: [id])
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ecoProfile         ShopEcoProfile?
  sections           ShopSection[]
  connectedAccount   SellerConnectedAccount?
  payouts            SellerPayout[]
  balance            SellerBalance?
  taxData            Seller1099Data[]
  payments           Payment[]

  @@index([isVerified])
  @@index([nonprofitId])
  @@index([slug])
  @@index([userId])
}

model SupportTicket {
  id        String              @id @default(cuid())
  userId    String
  orderId   String?
  subject   String
  message   String
  status    SupportTicketStatus @default(OPEN)
  priority  String              @default("normal")
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([priority])
  @@index([status])
  @@index([userId])
}

model SustainabilityScore {
  id                 String   @id @default(cuid())
  productId          String   @unique
  totalScore         Int
  materialsScore     Int
  packagingScore     Int
  carbonScore        Int
  certificationScore Int
  breakdownJson      Json
  calculatedAt       DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([totalScore])
  @@index([updatedAt])
}

model ShopEcoProfile {
  id                     String   @id @default(cuid())
  shopId                 String   @unique

  // Tier 1: Basic toggles (10 fields = 70% max)
  plasticFreePackaging   Boolean  @default(false)
  recycledPackaging      Boolean  @default(false)
  biodegradablePackaging Boolean  @default(false)
  organicMaterials       Boolean  @default(false)
  recycledMaterials      Boolean  @default(false)
  fairTradeSourcing      Boolean  @default(false)
  localSourcing          Boolean  @default(false)
  carbonNeutralShipping  Boolean  @default(false)
  renewableEnergy        Boolean  @default(false)
  carbonOffset           Boolean  @default(false)

  // Tier 2: Optional details (30% max)
  annualCarbonEmissions  Float?
  carbonOffsetPercent    Int?
  renewableEnergyPercent Int?
  waterConservation      Boolean  @default(false)
  fairWageCertified      Boolean  @default(false)
  takeBackProgram        Boolean  @default(false)
  repairService          Boolean  @default(false)

  // Calculated metrics
  completenessPercent    Int      @default(0)
  tier                   String   @default("starter")

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  shop                   Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([completenessPercent])
  @@index([tier])
  @@index([shopId])
}

model ProductEcoProfile {
  id                     String   @id @default(cuid())
  productId              String   @unique

  // Materials (5 toggles + 2 optional %)
  isOrganic              Boolean  @default(false)
  isRecycled             Boolean  @default(false)
  isBiodegradable        Boolean  @default(false)
  isVegan                Boolean  @default(false)
  isFairTrade            Boolean  @default(false)
  organicPercent         Int?
  recycledPercent        Int?

  // Packaging (4 toggles)
  plasticFreePackaging   Boolean  @default(false)
  recyclablePackaging    Boolean  @default(false)
  compostablePackaging   Boolean  @default(false)
  minimalPackaging       Boolean  @default(false)

  // Carbon & Origin (4 toggles + 2 optional fields)
  carbonNeutralShipping  Boolean  @default(false)
  madeLocally            Boolean  @default(false)
  madeToOrder            Boolean  @default(false)
  renewableEnergyMade    Boolean  @default(false)
  carbonFootprintKg      Float?
  madeIn                 String?

  // End of Life (4 toggles + 1 optional text)
  isRecyclable           Boolean  @default(false)
  isCompostable          Boolean  @default(false)
  isRepairable           Boolean  @default(false)
  hasDisposalInfo        Boolean  @default(false)
  disposalInstructions   String?

  // Calculated
  completenessPercent    Int      @default(0)

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  product                Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([isOrganic])
  @@index([plasticFreePackaging])
  @@index([carbonNeutralShipping])
  @@index([completenessPercent])
  @@index([productId])
}

model ShopSection {
  id          String               @id @default(cuid())
  shopId      String
  name        String
  slug        String
  description String?
  position    Int                  @default(0)
  isVisible   Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  shop        Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  products    ShopSectionProduct[]

  @@unique([shopId, slug])
  @@index([shopId])
  @@index([position])
  @@index([isVisible])
}

model ShopSectionProduct {
  id        String      @id @default(cuid())
  sectionId String
  productId String
  position  Int         @default(0)
  addedAt   DateTime    @default(now())
  section   ShopSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([sectionId, productId])
  @@index([sectionId])
  @@index([productId])
}

model User {
  id                               String                  @id @default(cuid())
  email                            String                  @unique
  emailVerified                    DateTime?
  name                             String?
  avatar                           String?
  phone                            String?
  role                             Role                    @default(BUYER)
  twoFactorEnabled                 Boolean                 @default(false)
  createdAt                        DateTime                @default(now())
  updatedAt                        DateTime                @updatedAt
  addresses                        Address[]
  analyticsEvents                  AnalyticsEvent[]
  collections                      Collection[]
  favorites                        Favorite[]
  sentMessages                     Message[]               @relation("Message_fromUserIdToUser")
  receivedMessages                 Message[]               @relation("Message_toUserIdToUser")
  notificationPreference           NotificationPreference?
  orders                           Order[]
  reviews                          Review[]
  searchHistory                    SearchHistory[]
  sellerApplications               SellerApplication[]
  sellerReviews                    SellerReview[]
  shop                             Shop?
  supportTickets                   SupportTicket[]

  @@index([createdAt])
  @@index([email])
  @@index([role])
}

model SellerConnectedAccount {
  id                  String   @id @default(cuid())
  shopId              String   @unique
  stripeAccountId     String   @unique
  accountType         String   @default("express")
  payoutSchedule      String   @default("weekly")
  status              String   @default("pending")
  onboardingCompleted Boolean  @default(false)
  chargesEnabled      Boolean  @default(false)
  payoutsEnabled      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  shop                Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([stripeAccountId])
  @@index([status])
}

model SellerPayout {
  id               String              @id @default(cuid())
  shopId           String
  stripePayoutId   String?             @unique
  amount           Float
  currency         String              @default("usd")
  status           String              @default("pending")
  periodStart      DateTime
  periodEnd        DateTime
  transactionCount Int
  metadata         Json?
  failureReason    String?
  createdAt        DateTime            @default(now())
  paidAt           DateTime?
  shop             Shop                @relation(fields: [shopId], references: [id])
  payments         Payment[]
  paymentItems     PaymentPayoutItem[]

  @@index([shopId])
  @@index([status])
  @@index([createdAt])
  @@index([paidAt])
}

model PaymentPayoutItem {
  id        String       @id @default(cuid())
  payoutId  String
  paymentId String
  amount    Float
  payout    SellerPayout @relation(fields: [payoutId], references: [id], onDelete: Cascade)
  payment   Payment      @relation(fields: [paymentId], references: [id])

  @@unique([payoutId, paymentId])
  @@index([payoutId])
  @@index([paymentId])
}

model SellerBalance {
  id               String   @id @default(cuid())
  shopId           String   @unique
  availableBalance Float    @default(0)
  pendingBalance   Float    @default(0)
  totalEarned      Float    @default(0)
  totalPaidOut     Float    @default(0)
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

model TaxRecord {
  id              String   @id @default(cuid())
  orderId         String
  state           String
  taxAmount       Float
  taxRate         Float
  taxableAmount   Float
  taxJurisdiction Json?
  createdAt       DateTime @default(now())
  order           Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([state])
  @@index([createdAt])
}

model Seller1099Data {
  id                String   @id @default(cuid())
  shopId            String
  taxYear           Int
  grossPayments     Float    @default(0)
  transactionCount  Int      @default(0)
  reportingRequired Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  shop              Shop     @relation(fields: [shopId], references: [id])

  @@unique([shopId, taxYear])
  @@index([shopId])
  @@index([taxYear])
  @@index([reportingRequired])
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum DonationStatus {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  ARCHIVED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum VerificationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}
